use std::net::Ipv4Addr;

use crate::config::Config;
use crate::context::AppContextRef;

use super::CommonFilterModule;
use super::FilterModule;
use super::IpFilterModule;
use super::IpFilterRequest;
use super::IpFilterResponse;

pub struct ListFilter {
    ctx: AppContextRef,
}

impl ListFilter {
    pub fn new(ctx: AppContextRef) -> Box<ListFilter> {
        return Box::new(ListFilter { ctx: ctx });
    }

    pub fn new_module(ctx: AppContextRef) -> FilterModule {
        return FilterModule::Ip(ListFilter::new(ctx));
    }
}

impl CommonFilterModule for ListFilter {}

fn inet_list_contains(list: &Vec<cidr::Ipv4Inet>, ip: &Ipv4Addr) -> bool {
    return list.iter().find(|&n| n.contains(ip)).is_some();
}

impl IpFilterModule for ListFilter {
    fn ip_filter(&self, request: &IpFilterRequest) -> IpFilterResponse {
        let config = &self.ctx.lock().unwrap().config;
        if inet_list_contains(&config.filters.whitelist, &request.dst_ip) {
            println!("Whitelisted IP: {:?}", request.dst_ip);
            return IpFilterResponse {
                new_dst_ip: None,
                ..Default::default()
            };
        } else if inet_list_contains(&config.filters.blacklist, &request.dst_ip) {
            println!("Blacklisted IP: {:?}", request.dst_ip);
            return IpFilterResponse {
                new_dst_ip: Some(Ipv4Addr::UNSPECIFIED),
                ..Default::default()
            };
        } else {
            return IpFilterResponse {
                new_dst_ip: None,
                ..Default::default()
            };
        }
    }
}

mod tests {
    use super::*;

    use crate::{config::Filters, context::AppContext};
    use std::net::Ipv4Addr;

    #[test]
    fn test_ip_filter() {
        let config = Config {
            filters: Filters {
                blacklist: vec![cidr::Ipv4Inet::new(Ipv4Addr::new(192, 168, 1, 1), 24).unwrap()],
                whitelist: vec![cidr::Ipv4Inet::new(Ipv4Addr::new(192, 168, 1, 100), 32).unwrap()],
                ..Default::default()
            },
        };
        let ctx = AppContext::new(config);

        let filter = ListFilter::new(ctx);

        let request = IpFilterRequest {
            src_ip: Ipv4Addr::new(192, 168, 2, 1),
            dst_ip: Ipv4Addr::new(192, 168, 1, 1),
            src_port: 1234,
            dst_port: 80,
        };
        let response = filter.ip_filter(&request);
        assert_eq!(response.new_dst_ip, Some(Ipv4Addr::UNSPECIFIED));

        let request = IpFilterRequest {
            src_ip: Ipv4Addr::new(192, 168, 2, 1),
            dst_ip: Ipv4Addr::new(192, 168, 1, 100),
            src_port: 1234,
            dst_port: 80,
        };
        let response = filter.ip_filter(&request);
        assert_eq!(response.new_dst_ip, None);

        let request = IpFilterRequest {
            src_ip: Ipv4Addr::new(192, 168, 2, 1),
            dst_ip: Ipv4Addr::new(192, 168, 2, 101),
            src_port: 1234,
            dst_port: 80,
        };
        let response = filter.ip_filter(&request);
        assert_eq!(response.new_dst_ip, None);
    }
}
