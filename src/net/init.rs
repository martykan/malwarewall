use async_tun::result::Result;
use async_tun::Tun;
use async_tun::TunBuilder;
use mac_address::MacAddress;
use std::net::Ipv4Addr;
use std::process::Command;

use crate::constants::MY_MAC;
use crate::constants::TUN_NAME_IN;
use crate::constants::TUN_NAME_OUT;

/// Get the tun interface for the inbound traffic
pub async fn get_tun_in() -> Result<Tun> {
    return TunBuilder::new()
        .name(TUN_NAME_IN)
        .tap(true)
        .packet_info(false)
        .mtu(1500)
        .up()
        .mac(MacAddress::new(MY_MAC))
        .address(Ipv4Addr::new(10, 0, 0, 1))
        .destination(Ipv4Addr::new(10, 0, 0, 1))
        .broadcast(Ipv4Addr::BROADCAST)
        .netmask(Ipv4Addr::new(255, 255, 255, 0))
        .try_build()
        .await;
}

/// Get the tun interface for the outside world
pub async fn get_tun_out() -> Result<Tun> {
    return TunBuilder::new()
        .name(TUN_NAME_OUT)
        .tap(false)
        .packet_info(false)
        .mtu(1500)
        .up()
        .address(Ipv4Addr::new(10, 2, 0, 1))
        .destination(Ipv4Addr::new(10, 2, 0, 1))
        .broadcast(Ipv4Addr::BROADCAST)
        .netmask(Ipv4Addr::new(255, 255, 255, 0))
        .try_build()
        .await;
}

/// Run iptables commands to set up the outbound routing.
pub fn setup_iptables() {
    _ = Command::new("sysctl")
        .args(["net.ipv4.ip_forward=1"])
        .output();
    _ = Command::new("iptables")
        .args([
            "-t",
            "nat",
            "-A",
            "POSTROUTING",
            "-o",
            "eth0",
            "-j",
            "MASQUERADE",
        ])
        .output();
    _ = Command::new("iptables")
        .args([
            "-t",
            "nat",
            "-A",
            "POSTROUTING",
            "-s",
            "10.2.0.0/24",
            "-j",
            "MASQUERADE",
        ])
        .output();
    _ = Command::new("iptables")
        .args([
            "-t",
            "filter",
            "-A",
            "FORWARD",
            "-i",
            TUN_NAME_OUT,
            "-s",
            "10.2.0.0/24",
            "-j",
            "ACCEPT",
        ])
        .output();
    _ = Command::new("iptables")
        .args([
            "-t",
            "filter",
            "-A",
            "FORWARD",
            "-o",
            TUN_NAME_OUT,
            "-s",
            "10.2.0.0/24",
            "-j",
            "ACCEPT",
        ])
        .output();
    _ = Command::new("iptables")
        .args([
            "-t",
            "filter",
            "-A",
            "FORWARD",
            "-i",
            TUN_NAME_OUT,
            "-o",
            "eth0",
            "-j",
            "ACCEPT",
        ])
        .output();
    _ = Command::new("iptables")
        .args([
            "-t",
            "filter",
            "-A",
            "FORWARD",
            "-m",
            "state",
            "--state",
            "ESTABLISHED,RELATED",
            "-j",
            "ACCEPT",
        ])
        .output();
}
