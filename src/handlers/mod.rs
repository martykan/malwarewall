use std::fmt::Debug;
use std::fmt::Formatter;
use std::net::Ipv4Addr;

use crate::data::flow_cache::FlowProtocol;

pub mod dns_filter;
pub mod ip_list_filter;
pub mod ip_redirect;
pub mod rate_limit;

/// Filter modules are used to filter packets.
pub enum FilterModule {
    Ip(Box<dyn IpFilterModule>),
}

impl Debug for FilterModule {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            FilterModule::Ip(_) => write!(f, "IpFilterModule"),
        }
    }
}

/// A trait for defining a generic filter module.
pub trait CommonFilterModule: Send {}

/// A trait for defining a IP filter module.
pub trait IpFilterModule: CommonFilterModule {
    /// Filter an IP address.
    /// @param request The request to filter.
    /// @return The response to the request.
    /// @note The response may contain a new IP address to redirect to or DROP the packet.
    fn ip_filter(&self, request: &IpFilterRequest) -> IpFilterResponse;
}

/// Input for a filter module.
pub struct IpFilterRequest {
    pub src_ip: Ipv4Addr,
    pub dst_ip: Ipv4Addr,
    pub src_port: u16,
    pub dst_port: u16,
    pub protocol: FlowProtocol,
    pub payload: Vec<u8>,
}

/// Output for a filter module.
pub struct IpFilterResponse {
    pub new_src_ip: Option<Ipv4Addr>,
    pub new_dst_ip: Option<Ipv4Addr>,
    pub new_src_port: Option<u16>,
    pub new_dst_port: Option<u16>,
    pub end: bool, // If true, the packet should not be sent to the next filter module
}

impl Default for IpFilterResponse {
    fn default() -> Self {
        return IpFilterResponse {
            new_src_ip: None,
            new_dst_ip: None,
            new_src_port: None,
            new_dst_port: None,
            end: false,
        };
    }
}
