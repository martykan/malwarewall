# malwarewall.sh
#   This script is used to start the Malware Network Analyzer
# Commands
#   m.sh start
#   m.sh monitor
#   m.sh docker <container>
#   m.sh cowrie
#   m.sh qemu

if [ "$1" = "start" ]; then
  echo "Starting malwarewall"

  RUST_LOG=warn
  #,flows=info
  if [ "$2" = "debug" ]; then
    RUST_LOG=info
  fi
  if [ "$2" = "fast" ]; then
    RUST_LOG=
  fi
  sudo -E RUST_LOG=$RUST_LOG $(which cargo) run -q
elif [ "$1" = "monitor" ]; then
  tmux \
    new-session  'sudo tcpdump -n -i tap10' \; \
    split-window -p 66 -h 'sudo tcpdump -n -i tun11' \; \
    split-window -h 'sudo tcpdump -n -i eth0 port 80' \;
elif [ "$1" = "docker" ]; then
  echo "Starting docker container"
  CONTAINER=osexp2000/ubuntu-with-utils
  if [ "$2" != "" ]; then
    CONTAINER=$2
  fi
  sudo docker network rm malwarewall_net 2>/dev/null
  # If network does not exist, create it
  if [ "$(sudo docker network ls | grep malwarewall_net)" = "" ]; then
    sudo docker network create -d macvlan --subnet=10.0.0.0/24 --gateway=10.0.0.1 -o parent=tap10 malwarewall_net
  fi
  sudo docker run --network malwarewall_net --dns=1.1.1.1 -it $CONTAINER
elif [ "$1" = "vpn" ]; then
  echo "Starting VPN"
  sudo docker run \
    --rm \
    --network malwarewall_net \
    --name ipsec-vpn-server \
    --env-file ./vpn.env \
    -v ikev2-vpn-data:/etc/ipsec.d \
    -v /lib/modules:/lib/modules:ro \
    -p 500:500/udp \
    -p 4500:4500/udp \
    --privileged -d \
    hwdsl2/ipsec-vpn-server
  CONTAINER_IP=$(sudo docker inspect ipsec-vpn-server -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
  sudo iptables -t nat -I POSTROUTING -s $CONTAINER_IP ! -o docker0 -j SNAT --to 10.0.0.1
  sudo iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 500 -j DNAT --to-destination $CONTAINER_IP:500
  sudo iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 4500 -j DNAT --to-destination $CONTAINER_IP:4500
  sudo iptables -A FORWARD -p tcp -d $CONTAINER_IP --dport 500 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
  sudo iptables -A FORWARD -p tcp -d $CONTAINER_IP --dport 4500 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
  #sudo ip route add default via 10.0.0.1 dev tap10 table analysis
  #sudo ip rule add from $CONTAINER_IP table analysis
  #sudo ip route flush cache
elif [ "$1" = "cowrie" ]; then
  echo "Starting cowrie"
  sudo docker run --rm -d --name cowrie cowrie/cowrie
  sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' cowrie
elif [ "$1" = "qemu" ]; then
  # Create a tap device for qemu
  sudo ip tuntap del tap20 mode tap 2>/dev/null
  sudo ip tuntap add tap20 mode tap user root
  sudo ip link set tap20 up
  # Bridge the tap device to the macvtap device
  sudo ip link del br20 2>/dev/null
  sudo ip link add br20 type bridge
  sudo ip link set tap10 master br20
  sudo ip link set tap20 master br20
  sudo ip link set dev br20 address 02:00:00:00:01:01
  sudo ip link set br20 up
  # Assign IP address to the bridge
  sudo ip addr add 10.3.0.1/24 brd + dev br20
  sudo ip addr add 10.4.0.1/24 brd + dev tap20

  # Start qemu
  sudo /usr/bin/qemu-system-x86_64 \
  -usb -device qemu-xhci,id=usbbus -device usb-wacom-tablet \
  -drive node-name=hd0,media=disk,file=/root/nemu_vm/winxp/winxp_a.img \
  -m 2048 -M pc-i440fx-focal \
  -net nic,model=rtl8139 \
  -net tap,ifname=tap20,script=no,downscript=no \
  -pidfile /root/nemu_vm/winxp/qemu.pid \
  -qmp unix:/root/nemu_vm/winxp/qmp.sock,server,nowait -vnc 127.0.0.1:0 
  sudo ip link del br20 2>/dev/null
elif [ "$1" = "mitmproxy" ]; then
  sudo ip address add 10.0.0.251 dev tap10
  sudo ip route add default via 10.0.0.1 dev tap10 table analysis
  sudo ip rule add from 10.0.0.251/32 table analysis
  sudo ip route flush cache
  sudo iptables -t nat -A PREROUTING -i tun11 -p tcp ! -s 10.2.0.251 --dport 80 -j REDIRECT --to-port 8080
  sudo iptables -t nat -A PREROUTING -i tun11 -p tcp ! -s 10.2.0.251 --dport 443 -j REDIRECT --to-port 8080
  rm -f mitmpcap.pcap
  sudo mitmproxy --mode transparent --showhost --set connect_addr=10.0.0.251 --set connection_strategy=lazy -s mitmpcap.py
  sudo iptables -t nat -D PREROUTING -i tun11 -p tcp ! -s 10.2.0.251 --dport 80 -j REDIRECT --to-port 8080
  sudo iptables -t nat -D PREROUTING -i tun11 -p tcp ! -s 10.2.0.251 --dport 443 -j REDIRECT --to-port 8080
elif [ "$1" = "suricata" ]; then
  rm -f suricatalogs/*
  tail -n+0 -F mitmpcap.pcap | sudo suricata -c /etc/suricata/suricata.yaml -l suricatalogs -r /dev/stdin -k none
else
  echo "Usage: malwarewall.sh {start|monitor|docker|cowrie|qemu}"
fi