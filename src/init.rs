use async_tun::result::Result;
use async_tun::Tun;
use async_tun::TunBuilder;
use std::net::Ipv4Addr;

/// Get the tun interface for the inbound traffic
pub async fn get_tun_in() -> Result<Tun> {
    return TunBuilder::new()
        .name("tap10")
        .tap(true)
        .packet_info(false)
        .mtu(1500)
        .up()
        .address(Ipv4Addr::new(10, 0, 0, 1))
        .destination(Ipv4Addr::new(10, 1, 0, 1))
        .broadcast(Ipv4Addr::BROADCAST)
        .netmask(Ipv4Addr::new(255, 255, 255, 0))
        .try_build()
        .await;
}

/// Get the tun interface for the outside world
pub async fn get_tun_out() -> Result<Tun> {
    return TunBuilder::new()
        .name("tap11")
        .tap(true)
        .packet_info(false)
        .mtu(1500)
        .up()
        .address(Ipv4Addr::new(10, 2, 0, 0))
        .destination(Ipv4Addr::new(10, 2, 0, 1))
        .broadcast(Ipv4Addr::BROADCAST)
        .netmask(Ipv4Addr::new(255, 255, 255, 0))
        .try_build()
        .await;
}
