use async_std::fs::File;
use async_std::future;
use async_std::io::BufReader;
use async_std::prelude::*;
use async_std::task;
use async_std::task::JoinHandle;
use async_tun::result::Result;
use std::io::Write;
use std::os::unix::prelude::AsRawFd;
use std::os::unix::prelude::FromRawFd;
use std::time::Duration;

mod init;
use init::get_tun_in;
use init::get_tun_out;
use init::setup_iptables;
mod parse_packet;
use parse_packet::parse_packet;

/// Read from the tun interface, process the packet and write to the file
fn create_handler(
    inside: bool,
    read_file: File,
    mut write_file: std::fs::File,
) -> JoinHandle<Result<()>> {
    return task::spawn(async move {
        let mut reader = BufReader::new(read_file);
        let mut buf = [0u8; 1500];
        loop {
            let read_future = reader.read(&mut buf);
            let result = future::timeout(Duration::from_millis(500), read_future).await;
            match result {
                Ok(n) => {
                    if inside {
                        print!("->  Packet from inside");
                    } else {
                        print!("-<  Packet from outside");
                    }
                    println!(" - reading {} bytes", n.unwrap());
                    let (should_forward, result) = parse_packet(&buf);
                    println!("");
                    if should_forward {
                        let res_u = result.unwrap();
                        write_file.write_all(&res_u).unwrap_or_else(|e| {
                            println!("Error writing: {:?}", e);
                        });
                        write_file.flush().unwrap_or_else(|e| {
                            println!("Error flushing: {:?}", e);
                        });
                    }
                }
                Err(_) => {}
            }
        }
    });
}

async fn async_main<'a>() -> Result<()> {
    let tun_in = get_tun_in().await?;
    let tun_out = get_tun_out().await?;

    setup_iptables();

    println!("-----------");
    println!("tun created");
    println!("-----------");

    // Unsafe since we are working with raw file descriptors
    unsafe {
        let tun_in_write = std::fs::File::from_raw_fd(tun_in.as_raw_fd());
        let tun_in_read = File::from_raw_fd(tun_in.as_raw_fd());
        let tun_out_write = std::fs::File::from_raw_fd(tun_out.as_raw_fd());
        let tun_out_read = File::from_raw_fd(tun_out.as_raw_fd());

        let f1 = create_handler(true, tun_in_read, tun_out_write);
        let f2 = create_handler(false, tun_out_read, tun_in_write);

        f1.await?;
        f2.await?;
    }

    Ok(())
}

fn main() -> Result<()> {
    task::block_on(async_main())
}
